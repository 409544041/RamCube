using System;
using System.Collections.Generic;
using UnityEngine;
using BansheeGz.BGDatabase;

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

[AddComponentMenu("BansheeGz/Generated/M_LevelData")]
public partial class M_LevelData : BGEntityGo
{
	public override BGMetaEntity MetaConstraint
	{
		get
		{
			return MetaDefault;
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4612244309294333557UL,1881374458602735547UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Entity.Index];
		}
		set
		{
			_f_name[Entity.Index] = value;
		}
	}
	public E_Pin f_Pin
	{
		get
		{
			return (E_Pin) _f_Pin[Entity.Index];
		}
		set
		{
			_f_Pin[Entity.Index] = value;
		}
	}
	public System.String f_Level
	{
		get
		{
			return _f_Level[Entity.Index];
		}
		set
		{
			_f_Level[Entity.Index] = value;
		}
	}
	public System.Boolean f_InMap
	{
		get
		{
			return _f_InMap[Entity.Index];
		}
		set
		{
			_f_InMap[Entity.Index] = value;
		}
	}
	public System.Int32 f_LocksAmount
	{
		get
		{
			return _f_LocksAmount[Entity.Index];
		}
		set
		{
			_f_LocksAmount[Entity.Index] = value;
		}
	}
	public System.Boolean f_SegmentPresent
	{
		get
		{
			return _f_SegmentPresent[Entity.Index];
		}
		set
		{
			_f_SegmentPresent[Entity.Index] = value;
		}
	}
	public List<E_Pin> f_UnlocksPins
	{
		get
		{
			var val = _f_UnlocksPins[Entity.Index];
			if(val==null || val.Count==0) return null;
			var ___UnlocksPins = new List<E_Pin>();
			for (var i = 0; i < val.Count; i++) ___UnlocksPins.Add((E_Pin) val[i]);
			return ___UnlocksPins;
		}
		set
		{
			var val = _f_UnlocksPins[Entity.Index];
			if(val==null) val = new List<BGEntity>();
			val.Clear();
			if(value!=null) for (var i = 0; i < value.Count; i++) val.Add(value[i]);
			_f_UnlocksPins[Entity.Index] = val;
		}
	}
	public List<E_MapWalls> f_WallsToDest
	{
		get
		{
			var val = _f_WallsToDest[Entity.Index];
			if(val==null || val.Count==0) return null;
			var ___WallsToDest = new List<E_MapWalls>();
			for (var i = 0; i < val.Count; i++) ___WallsToDest.Add((E_MapWalls) val[i]);
			return ___WallsToDest;
		}
		set
		{
			var val = _f_WallsToDest[Entity.Index];
			if(val==null) val = new List<BGEntity>();
			val.Clear();
			if(value!=null) for (var i = 0; i < value.Count; i++) val.Add(value[i]);
			_f_WallsToDest[Entity.Index] = val;
		}
	}
	public List<E_MapWalls> f_WallsFromOrigin
	{
		get
		{
			var val = _f_WallsFromOrigin[Entity.Index];
			if(val==null || val.Count==0) return null;
			var ___WallsFromOrigin = new List<E_MapWalls>();
			for (var i = 0; i < val.Count; i++) ___WallsFromOrigin.Add((E_MapWalls) val[i]);
			return ___WallsFromOrigin;
		}
		set
		{
			var val = _f_WallsFromOrigin[Entity.Index];
			if(val==null) val = new List<BGEntity>();
			val.Clear();
			if(value!=null) for (var i = 0; i < value.Count; i++) val.Add(value[i]);
			_f_WallsFromOrigin[Entity.Index] = val;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName __f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(__f_name==null || __f_name.IsDeleted) __f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(4740419652275606489UL,16281884087163071164UL));
			return __f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle __f_Pin;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Pin
	{
		get
		{
			if(__f_Pin==null || __f_Pin.IsDeleted) __f_Pin=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(4755775874130559592UL,9555642772104298655UL));
			return __f_Pin;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldString __f_Level;
	public static BansheeGz.BGDatabase.BGFieldString _f_Level
	{
		get
		{
			if(__f_Level==null || __f_Level.IsDeleted) __f_Level=(BansheeGz.BGDatabase.BGFieldString) MetaDefault.GetField(new BGId(4793347658190675977UL,5994557562632312988UL));
			return __f_Level;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool __f_InMap;
	public static BansheeGz.BGDatabase.BGFieldBool _f_InMap
	{
		get
		{
			if(__f_InMap==null || __f_InMap.IsDeleted) __f_InMap=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(4858229157076024160UL,2433292969023106195UL));
			return __f_InMap;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldInt __f_LocksAmount;
	public static BansheeGz.BGDatabase.BGFieldInt _f_LocksAmount
	{
		get
		{
			if(__f_LocksAmount==null || __f_LocksAmount.IsDeleted) __f_LocksAmount=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5389772333846653446UL,11461131677490296486UL));
			return __f_LocksAmount;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool __f_SegmentPresent;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SegmentPresent
	{
		get
		{
			if(__f_SegmentPresent==null || __f_SegmentPresent.IsDeleted) __f_SegmentPresent=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5708768082108931619UL,17251627778783522965UL));
			return __f_SegmentPresent;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple __f_UnlocksPins;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_UnlocksPins
	{
		get
		{
			if(__f_UnlocksPins==null || __f_UnlocksPins.IsDeleted) __f_UnlocksPins=(BansheeGz.BGDatabase.BGFieldRelationMultiple) MetaDefault.GetField(new BGId(5421760005998256390UL,4758386679893286829UL));
			return __f_UnlocksPins;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple __f_WallsToDest;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_WallsToDest
	{
		get
		{
			if(__f_WallsToDest==null || __f_WallsToDest.IsDeleted) __f_WallsToDest=(BansheeGz.BGDatabase.BGFieldRelationMultiple) MetaDefault.GetField(new BGId(5242919301705000379UL,3930519681876219828UL));
			return __f_WallsToDest;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple __f_WallsFromOrigin;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_WallsFromOrigin
	{
		get
		{
			if(__f_WallsFromOrigin==null || __f_WallsFromOrigin.IsDeleted) __f_WallsFromOrigin=(BansheeGz.BGDatabase.BGFieldRelationMultiple) MetaDefault.GetField(new BGId(5300666196508900259UL,13485411823914233985UL));
			return __f_WallsFromOrigin;
		}
	}
}
