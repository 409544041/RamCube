using System;
using System.Collections.Generic;
using BansheeGz.BGDatabase;
using Alias_rifegrt_Pin = E_Pin;
using Alias_rifegrt_BiomeGameplayData = E_BiomeGameplayData;
using Alias_rifegrt_MapBiomeIdentifier = E_MapBiomeIdentifier;
using Alias_rifegrt_LevelData = E_LevelData;
using Alias_rifegrt_LevelGameplayData = E_LevelGameplayData;
using Alias_rifegrt_MapWalls = E_MapWalls;

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

#pragma warning disable 414

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_LevelData : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_LevelData(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_LevelData(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4612244309294333557UL,1881374458602735547UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public E_Pin f_Pin
	{
		get
		{
			return (E_Pin) _f_Pin[Index];
		}
		set
		{
			_f_Pin[Index] = value;
		}
	}
	public System.String f_Level
	{
		get
		{
			return _f_Level[Index];
		}
		set
		{
			_f_Level[Index] = value;
		}
	}
	public System.Boolean f_InMap
	{
		get
		{
			return _f_InMap[Index];
		}
		set
		{
			_f_InMap[Index] = value;
		}
	}
	public System.Int32 f_LocksAmount
	{
		get
		{
			return _f_LocksAmount[Index];
		}
		set
		{
			_f_LocksAmount[Index] = value;
		}
	}
	public System.Boolean f_SegmentPresent
	{
		get
		{
			return _f_SegmentPresent[Index];
		}
		set
		{
			_f_SegmentPresent[Index] = value;
		}
	}
	public List<E_Pin> f_UnlocksPins
	{
		get
		{
			var val = _f_UnlocksPins[Index];
			if(val==null || val.Count==0) return null;
			var _ufli12jhs_UnlocksPins = new List<E_Pin>();
			for (var i = 0; i < val.Count; i++) _ufli12jhs_UnlocksPins.Add((E_Pin) val[i]);
			return _ufli12jhs_UnlocksPins;
		}
		set
		{
			var val = _f_UnlocksPins[Index];
			if(val==null) val = new List<BGEntity>();
			val.Clear();
			if(value!=null) for (var i = 0; i < value.Count; i++) val.Add(value[i]);
			_f_UnlocksPins[Index] = val;
		}
	}
	public List<E_MapWalls> f_WallsToDest
	{
		get
		{
			var val = _f_WallsToDest[Index];
			if(val==null || val.Count==0) return null;
			var _ufli12jhs_WallsToDest = new List<E_MapWalls>();
			for (var i = 0; i < val.Count; i++) _ufli12jhs_WallsToDest.Add((E_MapWalls) val[i]);
			return _ufli12jhs_WallsToDest;
		}
		set
		{
			var val = _f_WallsToDest[Index];
			if(val==null) val = new List<BGEntity>();
			val.Clear();
			if(value!=null) for (var i = 0; i < value.Count; i++) val.Add(value[i]);
			_f_WallsToDest[Index] = val;
		}
	}
	public List<E_MapWalls> f_WallsFromOrigin
	{
		get
		{
			var val = _f_WallsFromOrigin[Index];
			if(val==null || val.Count==0) return null;
			var _ufli12jhs_WallsFromOrigin = new List<E_MapWalls>();
			for (var i = 0; i < val.Count; i++) _ufli12jhs_WallsFromOrigin.Add((E_MapWalls) val[i]);
			return _ufli12jhs_WallsFromOrigin;
		}
		set
		{
			var val = _f_WallsFromOrigin[Index];
			if(val==null) val = new List<BGEntity>();
			val.Clear();
			if(value!=null) for (var i = 0; i < value.Count; i++) val.Add(value[i]);
			_f_WallsFromOrigin[Index] = val;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(4740419652275606489UL,16281884087163071164UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_Pin;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Pin
	{
		get
		{
			if(_ufle12jhs77_f_Pin==null || _ufle12jhs77_f_Pin.IsDeleted) _ufle12jhs77_f_Pin=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(4755775874130559592UL,9555642772104298655UL));
			return _ufle12jhs77_f_Pin;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_Level;
	public static BansheeGz.BGDatabase.BGFieldString _f_Level
	{
		get
		{
			if(_ufle12jhs77_f_Level==null || _ufle12jhs77_f_Level.IsDeleted) _ufle12jhs77_f_Level=(BansheeGz.BGDatabase.BGFieldString) MetaDefault.GetField(new BGId(4793347658190675977UL,5994557562632312988UL));
			return _ufle12jhs77_f_Level;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_InMap;
	public static BansheeGz.BGDatabase.BGFieldBool _f_InMap
	{
		get
		{
			if(_ufle12jhs77_f_InMap==null || _ufle12jhs77_f_InMap.IsDeleted) _ufle12jhs77_f_InMap=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(4858229157076024160UL,2433292969023106195UL));
			return _ufle12jhs77_f_InMap;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_LocksAmount;
	public static BansheeGz.BGDatabase.BGFieldInt _f_LocksAmount
	{
		get
		{
			if(_ufle12jhs77_f_LocksAmount==null || _ufle12jhs77_f_LocksAmount.IsDeleted) _ufle12jhs77_f_LocksAmount=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5389772333846653446UL,11461131677490296486UL));
			return _ufle12jhs77_f_LocksAmount;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SegmentPresent;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SegmentPresent
	{
		get
		{
			if(_ufle12jhs77_f_SegmentPresent==null || _ufle12jhs77_f_SegmentPresent.IsDeleted) _ufle12jhs77_f_SegmentPresent=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5708768082108931619UL,17251627778783522965UL));
			return _ufle12jhs77_f_SegmentPresent;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_UnlocksPins;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_UnlocksPins
	{
		get
		{
			if(_ufle12jhs77_f_UnlocksPins==null || _ufle12jhs77_f_UnlocksPins.IsDeleted) _ufle12jhs77_f_UnlocksPins=(BansheeGz.BGDatabase.BGFieldRelationMultiple) MetaDefault.GetField(new BGId(5421760005998256390UL,4758386679893286829UL));
			return _ufle12jhs77_f_UnlocksPins;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_WallsToDest;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_WallsToDest
	{
		get
		{
			if(_ufle12jhs77_f_WallsToDest==null || _ufle12jhs77_f_WallsToDest.IsDeleted) _ufle12jhs77_f_WallsToDest=(BansheeGz.BGDatabase.BGFieldRelationMultiple) MetaDefault.GetField(new BGId(5242919301705000379UL,3930519681876219828UL));
			return _ufle12jhs77_f_WallsToDest;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_WallsFromOrigin;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_WallsFromOrigin
	{
		get
		{
			if(_ufle12jhs77_f_WallsFromOrigin==null || _ufle12jhs77_f_WallsFromOrigin.IsDeleted) _ufle12jhs77_f_WallsFromOrigin=(BansheeGz.BGDatabase.BGFieldRelationMultiple) MetaDefault.GetField(new BGId(5300666196508900259UL,13485411823914233985UL));
			return _ufle12jhs77_f_WallsFromOrigin;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Pin.Factory _factory2_PFS = new E_Pin.Factory();
	private static readonly E_LevelGameplayData.Factory _factory3_PFS = new E_LevelGameplayData.Factory();
	private static readonly E_MapWalls.Factory _factory4_PFS = new E_MapWalls.Factory();
	private static readonly E_BiomeGameplayData.Factory _factory5_PFS = new E_BiomeGameplayData.Factory();
	private static readonly E_MapBiomeIdentifier.Factory _factory6_PFS = new E_MapBiomeIdentifier.Factory();
	private E_LevelData() : base(MetaDefault)
	{
	}
	private E_LevelData(BGId id) : base(MetaDefault, id)
	{
	}
	private E_LevelData(BGMetaEntity meta) : base(meta)
	{
	}
	private E_LevelData(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_LevelData FindEntity(Predicate<E_LevelData> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_LevelData) entity)) as E_LevelData;
	}
	public static List<E_LevelData> FindEntities(Predicate<E_LevelData> filter, List<E_LevelData> result=null, Comparison<E_LevelData> sort=null)
	{
		result = result ?? new List<E_LevelData>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_LevelData) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_LevelData) e1, (E_LevelData) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_LevelData) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_LevelData> action, Predicate<E_LevelData> filter=null, Comparison<E_LevelData> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_LevelData) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_LevelData) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_LevelData)e1,(E_LevelData)e2));
	}
	public static E_LevelData GetEntity(BGId entityId)
	{
		return (E_LevelData) MetaDefault.GetEntity(entityId);
	}
	public static E_LevelData GetEntity(int index)
	{
		return (E_LevelData) MetaDefault[index];
	}
	public static E_LevelData GetEntity(string entityName)
	{
		return (E_LevelData) MetaDefault.GetEntity(entityName);
	}
	public static E_LevelData NewEntity()
	{
		return (E_LevelData) MetaDefault.NewEntity();
	}
	public void f_UnlocksPins_Add(E_Pin related)
	{
		if(related == null) throw new Exception("Can not add a related entity, cause value is null");
		var val = _f_UnlocksPins[Index];
		if(val == null) val = new List<BGEntity>{related};
		else val.Add(related);
		_f_UnlocksPins[Index] = val;
	}
	public void f_UnlocksPins_Remove(E_Pin related)
	{
		if(related == null) throw new Exception("Can not remove a related entity, cause value is null");
		var val = _f_UnlocksPins[Index];
		if(val != null)
		{
			val.RemoveAll(e => Equals(e, related));
			_f_UnlocksPins[Index] = val.Count == 0 ? null : val;
		}
	}
	public void f_WallsToDest_Add(E_MapWalls related)
	{
		if(related == null) throw new Exception("Can not add a related entity, cause value is null");
		var val = _f_WallsToDest[Index];
		if(val == null) val = new List<BGEntity>{related};
		else val.Add(related);
		_f_WallsToDest[Index] = val;
	}
	public void f_WallsToDest_Remove(E_MapWalls related)
	{
		if(related == null) throw new Exception("Can not remove a related entity, cause value is null");
		var val = _f_WallsToDest[Index];
		if(val != null)
		{
			val.RemoveAll(e => Equals(e, related));
			_f_WallsToDest[Index] = val.Count == 0 ? null : val;
		}
	}
	public void f_WallsFromOrigin_Add(E_MapWalls related)
	{
		if(related == null) throw new Exception("Can not add a related entity, cause value is null");
		var val = _f_WallsFromOrigin[Index];
		if(val == null) val = new List<BGEntity>{related};
		else val.Add(related);
		_f_WallsFromOrigin[Index] = val;
	}
	public void f_WallsFromOrigin_Remove(E_MapWalls related)
	{
		if(related == null) throw new Exception("Can not remove a related entity, cause value is null");
		var val = _f_WallsFromOrigin[Index];
		if(val != null)
		{
			val.RemoveAll(e => Equals(e, related));
			_f_WallsFromOrigin[Index] = val.Count == 0 ? null : val;
		}
	}
}

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_Biome : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_Biome(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_Biome(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5318121685371950766UL,2942031341061376408UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public UnityEngine.Vector2 f_MinMaxX
	{
		get
		{
			return _f_MinMaxX[Index];
		}
		set
		{
			_f_MinMaxX[Index] = value;
		}
	}
	public UnityEngine.Vector2 f_MinMaxZ
	{
		get
		{
			return _f_MinMaxZ[Index];
		}
		set
		{
			_f_MinMaxZ[Index] = value;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(4811910356762317652UL,6316590992709792654UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_MinMaxX;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_MinMaxX
	{
		get
		{
			if(_ufle12jhs77_f_MinMaxX==null || _ufle12jhs77_f_MinMaxX.IsDeleted) _ufle12jhs77_f_MinMaxX=(BansheeGz.BGDatabase.BGFieldVector2) MetaDefault.GetField(new BGId(5540830184506237896UL,8565432699577718708UL));
			return _ufle12jhs77_f_MinMaxX;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_MinMaxZ;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_MinMaxZ
	{
		get
		{
			if(_ufle12jhs77_f_MinMaxZ==null || _ufle12jhs77_f_MinMaxZ.IsDeleted) _ufle12jhs77_f_MinMaxZ=(BansheeGz.BGDatabase.BGFieldVector2) MetaDefault.GetField(new BGId(5028550124850018592UL,7548933405663777956UL));
			return _ufle12jhs77_f_MinMaxZ;
		}
	}
	private static readonly List<BGEntity> _tugjbyuhfv_reusableList = new List<BGEntity>();
	public List<E_Pin> RelatedPinListUsingBiomeRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_Pin._f_Biome.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_Pin>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_Pin) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	public List<E_BiomeGameplayData> RelatedBiomeGameplayDataListUsingBiomeRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_BiomeGameplayData._f_Biome.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_BiomeGameplayData>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_BiomeGameplayData) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	public List<E_MapBiomeIdentifier> RelatedMapBiomeIdentifierListUsingBiomeRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_MapBiomeIdentifier._f_Biome.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_MapBiomeIdentifier>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_MapBiomeIdentifier) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Pin.Factory _factory2_PFS = new E_Pin.Factory();
	private static readonly E_LevelGameplayData.Factory _factory3_PFS = new E_LevelGameplayData.Factory();
	private static readonly E_MapWalls.Factory _factory4_PFS = new E_MapWalls.Factory();
	private static readonly E_BiomeGameplayData.Factory _factory5_PFS = new E_BiomeGameplayData.Factory();
	private static readonly E_MapBiomeIdentifier.Factory _factory6_PFS = new E_MapBiomeIdentifier.Factory();
	private E_Biome() : base(MetaDefault)
	{
	}
	private E_Biome(BGId id) : base(MetaDefault, id)
	{
	}
	private E_Biome(BGMetaEntity meta) : base(meta)
	{
	}
	private E_Biome(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_Biome FindEntity(Predicate<E_Biome> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_Biome) entity)) as E_Biome;
	}
	public static List<E_Biome> FindEntities(Predicate<E_Biome> filter, List<E_Biome> result=null, Comparison<E_Biome> sort=null)
	{
		result = result ?? new List<E_Biome>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_Biome) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_Biome) e1, (E_Biome) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_Biome) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_Biome> action, Predicate<E_Biome> filter=null, Comparison<E_Biome> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_Biome) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_Biome) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_Biome)e1,(E_Biome)e2));
	}
	public static E_Biome GetEntity(BGId entityId)
	{
		return (E_Biome) MetaDefault.GetEntity(entityId);
	}
	public static E_Biome GetEntity(int index)
	{
		return (E_Biome) MetaDefault[index];
	}
	public static E_Biome GetEntity(string entityName)
	{
		return (E_Biome) MetaDefault.GetEntity(entityName);
	}
	public static E_Biome NewEntity()
	{
		return (E_Biome) MetaDefault.NewEntity();
	}
}

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_Pin : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_Pin(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_Pin(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4954953875072214365UL,15478807282525472406UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public E_Biome f_Biome
	{
		get
		{
			return (E_Biome) _f_Biome[Index];
		}
		set
		{
			_f_Biome[Index] = value;
		}
	}
	public System.Int32 f_Index
	{
		get
		{
			return _f_Index[Index];
		}
		set
		{
			_f_Index[Index] = value;
		}
	}
	public System.Int32 f_PinTextUI
	{
		get
		{
			return _f_PinTextUI[Index];
		}
		set
		{
			_f_PinTextUI[Index] = value;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(5700619351467592780UL,9596716367873031603UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_Biome;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Biome
	{
		get
		{
			if(_ufle12jhs77_f_Biome==null || _ufle12jhs77_f_Biome.IsDeleted) _ufle12jhs77_f_Biome=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(5355639157912867324UL,1763305154346170539UL));
			return _ufle12jhs77_f_Biome;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_Index;
	public static BansheeGz.BGDatabase.BGFieldInt _f_Index
	{
		get
		{
			if(_ufle12jhs77_f_Index==null || _ufle12jhs77_f_Index.IsDeleted) _ufle12jhs77_f_Index=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5713392823763091186UL,10906278620831617424UL));
			return _ufle12jhs77_f_Index;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_PinTextUI;
	public static BansheeGz.BGDatabase.BGFieldInt _f_PinTextUI
	{
		get
		{
			if(_ufle12jhs77_f_PinTextUI==null || _ufle12jhs77_f_PinTextUI.IsDeleted) _ufle12jhs77_f_PinTextUI=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5208647534428573803UL,268406907975443346UL));
			return _ufle12jhs77_f_PinTextUI;
		}
	}
	private static readonly List<BGEntity> _tugjbyuhfv_reusableList = new List<BGEntity>();
	public List<E_LevelData> RelatedLevelDataListUsingPinRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_LevelData._f_Pin.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_LevelData>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_LevelData) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	public List<E_LevelData> RelatedLevelDataListUsingUnlocksPinsRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_LevelData._f_UnlocksPins.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_LevelData>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_LevelData) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	public List<E_LevelGameplayData> RelatedLevelGameplayDataListUsingPinRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_LevelGameplayData._f_Pin.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_LevelGameplayData>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_LevelGameplayData) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	public List<E_MapWalls> RelatedMapWallsListUsingOriginPinRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_MapWalls._f_OriginPin.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_MapWalls>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_MapWalls) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	public List<E_MapWalls> RelatedMapWallsListUsingDestPinRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_MapWalls._f_DestPin.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_MapWalls>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_MapWalls) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Pin.Factory _factory2_PFS = new E_Pin.Factory();
	private static readonly E_LevelGameplayData.Factory _factory3_PFS = new E_LevelGameplayData.Factory();
	private static readonly E_MapWalls.Factory _factory4_PFS = new E_MapWalls.Factory();
	private static readonly E_BiomeGameplayData.Factory _factory5_PFS = new E_BiomeGameplayData.Factory();
	private static readonly E_MapBiomeIdentifier.Factory _factory6_PFS = new E_MapBiomeIdentifier.Factory();
	private E_Pin() : base(MetaDefault)
	{
	}
	private E_Pin(BGId id) : base(MetaDefault, id)
	{
	}
	private E_Pin(BGMetaEntity meta) : base(meta)
	{
	}
	private E_Pin(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_Pin FindEntity(Predicate<E_Pin> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_Pin) entity)) as E_Pin;
	}
	public static List<E_Pin> FindEntities(Predicate<E_Pin> filter, List<E_Pin> result=null, Comparison<E_Pin> sort=null)
	{
		result = result ?? new List<E_Pin>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_Pin) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_Pin) e1, (E_Pin) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_Pin) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_Pin> action, Predicate<E_Pin> filter=null, Comparison<E_Pin> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_Pin) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_Pin) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_Pin)e1,(E_Pin)e2));
	}
	public static E_Pin GetEntity(BGId entityId)
	{
		return (E_Pin) MetaDefault.GetEntity(entityId);
	}
	public static E_Pin GetEntity(int index)
	{
		return (E_Pin) MetaDefault[index];
	}
	public static E_Pin GetEntity(string entityName)
	{
		return (E_Pin) MetaDefault.GetEntity(entityName);
	}
	public static E_Pin NewEntity()
	{
		return (E_Pin) MetaDefault.NewEntity();
	}
}

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_LevelGameplayData : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_LevelGameplayData(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_LevelGameplayData(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4723279784818553777UL,9330121963571183804UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public E_Pin f_Pin
	{
		get
		{
			return (E_Pin) _f_Pin[Index];
		}
		set
		{
			_f_Pin[Index] = value;
		}
	}
	public System.Int32 f_LocksLeft
	{
		get
		{
			return _f_LocksLeft[Index];
		}
		set
		{
			_f_LocksLeft[Index] = value;
		}
	}
	public System.Boolean f_DottedAnimPlayed
	{
		get
		{
			return _f_DottedAnimPlayed[Index];
		}
		set
		{
			_f_DottedAnimPlayed[Index] = value;
		}
	}
	public System.Boolean f_Unlocked
	{
		get
		{
			return _f_Unlocked[Index];
		}
		set
		{
			_f_Unlocked[Index] = value;
		}
	}
	public System.Boolean f_UnlockAnimPlayed
	{
		get
		{
			return _f_UnlockAnimPlayed[Index];
		}
		set
		{
			_f_UnlockAnimPlayed[Index] = value;
		}
	}
	public System.Boolean f_Completed
	{
		get
		{
			return _f_Completed[Index];
		}
		set
		{
			_f_Completed[Index] = value;
		}
	}
	public System.Boolean f_PathDrawn
	{
		get
		{
			return _f_PathDrawn[Index];
		}
		set
		{
			_f_PathDrawn[Index] = value;
		}
	}
	public System.Boolean f_LockIconDisabled
	{
		get
		{
			return _f_LockIconDisabled[Index];
		}
		set
		{
			_f_LockIconDisabled[Index] = value;
		}
	}
	public System.Boolean f_WallDown
	{
		get
		{
			return _f_WallDown[Index];
		}
		set
		{
			_f_WallDown[Index] = value;
		}
	}
	public System.Boolean f_DebugComplete
	{
		get
		{
			return _f_DebugComplete[Index];
		}
		set
		{
			_f_DebugComplete[Index] = value;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(5598081807989236421UL,1501239811640041904UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_Pin;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Pin
	{
		get
		{
			if(_ufle12jhs77_f_Pin==null || _ufle12jhs77_f_Pin.IsDeleted) _ufle12jhs77_f_Pin=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(5611101511638644096UL,7289200097385794695UL));
			return _ufle12jhs77_f_Pin;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_LocksLeft;
	public static BansheeGz.BGDatabase.BGFieldInt _f_LocksLeft
	{
		get
		{
			if(_ufle12jhs77_f_LocksLeft==null || _ufle12jhs77_f_LocksLeft.IsDeleted) _ufle12jhs77_f_LocksLeft=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5345850841205835300UL,16220438378230291107UL));
			return _ufle12jhs77_f_LocksLeft;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_DottedAnimPlayed;
	public static BansheeGz.BGDatabase.BGFieldBool _f_DottedAnimPlayed
	{
		get
		{
			if(_ufle12jhs77_f_DottedAnimPlayed==null || _ufle12jhs77_f_DottedAnimPlayed.IsDeleted) _ufle12jhs77_f_DottedAnimPlayed=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5267107265309508871UL,4080065285184299438UL));
			return _ufle12jhs77_f_DottedAnimPlayed;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_Unlocked;
	public static BansheeGz.BGDatabase.BGFieldBool _f_Unlocked
	{
		get
		{
			if(_ufle12jhs77_f_Unlocked==null || _ufle12jhs77_f_Unlocked.IsDeleted) _ufle12jhs77_f_Unlocked=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(4644558649005386762UL,13966429524211724976UL));
			return _ufle12jhs77_f_Unlocked;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_UnlockAnimPlayed;
	public static BansheeGz.BGDatabase.BGFieldBool _f_UnlockAnimPlayed
	{
		get
		{
			if(_ufle12jhs77_f_UnlockAnimPlayed==null || _ufle12jhs77_f_UnlockAnimPlayed.IsDeleted) _ufle12jhs77_f_UnlockAnimPlayed=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5477728311005227544UL,2327989079783061125UL));
			return _ufle12jhs77_f_UnlockAnimPlayed;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_Completed;
	public static BansheeGz.BGDatabase.BGFieldBool _f_Completed
	{
		get
		{
			if(_ufle12jhs77_f_Completed==null || _ufle12jhs77_f_Completed.IsDeleted) _ufle12jhs77_f_Completed=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5552126076174291767UL,11347803035636501888UL));
			return _ufle12jhs77_f_Completed;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_PathDrawn;
	public static BansheeGz.BGDatabase.BGFieldBool _f_PathDrawn
	{
		get
		{
			if(_ufle12jhs77_f_PathDrawn==null || _ufle12jhs77_f_PathDrawn.IsDeleted) _ufle12jhs77_f_PathDrawn=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5562002716607721452UL,9876705488166721464UL));
			return _ufle12jhs77_f_PathDrawn;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_LockIconDisabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_LockIconDisabled
	{
		get
		{
			if(_ufle12jhs77_f_LockIconDisabled==null || _ufle12jhs77_f_LockIconDisabled.IsDeleted) _ufle12jhs77_f_LockIconDisabled=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5041402763999311649UL,14533767244693604751UL));
			return _ufle12jhs77_f_LockIconDisabled;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_WallDown;
	public static BansheeGz.BGDatabase.BGFieldBool _f_WallDown
	{
		get
		{
			if(_ufle12jhs77_f_WallDown==null || _ufle12jhs77_f_WallDown.IsDeleted) _ufle12jhs77_f_WallDown=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5421608937216315096UL,9085621000404421508UL));
			return _ufle12jhs77_f_WallDown;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_DebugComplete;
	public static BansheeGz.BGDatabase.BGFieldBool _f_DebugComplete
	{
		get
		{
			if(_ufle12jhs77_f_DebugComplete==null || _ufle12jhs77_f_DebugComplete.IsDeleted) _ufle12jhs77_f_DebugComplete=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5260964097523911809UL,9029259795278731182UL));
			return _ufle12jhs77_f_DebugComplete;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Pin.Factory _factory2_PFS = new E_Pin.Factory();
	private static readonly E_LevelGameplayData.Factory _factory3_PFS = new E_LevelGameplayData.Factory();
	private static readonly E_MapWalls.Factory _factory4_PFS = new E_MapWalls.Factory();
	private static readonly E_BiomeGameplayData.Factory _factory5_PFS = new E_BiomeGameplayData.Factory();
	private static readonly E_MapBiomeIdentifier.Factory _factory6_PFS = new E_MapBiomeIdentifier.Factory();
	private E_LevelGameplayData() : base(MetaDefault)
	{
	}
	private E_LevelGameplayData(BGId id) : base(MetaDefault, id)
	{
	}
	private E_LevelGameplayData(BGMetaEntity meta) : base(meta)
	{
	}
	private E_LevelGameplayData(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_LevelGameplayData FindEntity(Predicate<E_LevelGameplayData> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_LevelGameplayData) entity)) as E_LevelGameplayData;
	}
	public static List<E_LevelGameplayData> FindEntities(Predicate<E_LevelGameplayData> filter, List<E_LevelGameplayData> result=null, Comparison<E_LevelGameplayData> sort=null)
	{
		result = result ?? new List<E_LevelGameplayData>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_LevelGameplayData) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_LevelGameplayData) e1, (E_LevelGameplayData) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_LevelGameplayData) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_LevelGameplayData> action, Predicate<E_LevelGameplayData> filter=null, Comparison<E_LevelGameplayData> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_LevelGameplayData) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_LevelGameplayData) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_LevelGameplayData)e1,(E_LevelGameplayData)e2));
	}
	public static E_LevelGameplayData GetEntity(BGId entityId)
	{
		return (E_LevelGameplayData) MetaDefault.GetEntity(entityId);
	}
	public static E_LevelGameplayData GetEntity(int index)
	{
		return (E_LevelGameplayData) MetaDefault[index];
	}
	public static E_LevelGameplayData GetEntity(string entityName)
	{
		return (E_LevelGameplayData) MetaDefault.GetEntity(entityName);
	}
	public static E_LevelGameplayData NewEntity()
	{
		return (E_LevelGameplayData) MetaDefault.NewEntity();
	}
}

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_MapWalls : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_MapWalls(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_MapWalls(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4959565327689654965UL,2471908366607778707UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public E_Pin f_OriginPin
	{
		get
		{
			return (E_Pin) _f_OriginPin[Index];
		}
		set
		{
			_f_OriginPin[Index] = value;
		}
	}
	public E_Pin f_DestPin
	{
		get
		{
			return (E_Pin) _f_DestPin[Index];
		}
		set
		{
			_f_DestPin[Index] = value;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(5712327967688250671UL,6283100240849974687UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_OriginPin;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_OriginPin
	{
		get
		{
			if(_ufle12jhs77_f_OriginPin==null || _ufle12jhs77_f_OriginPin.IsDeleted) _ufle12jhs77_f_OriginPin=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(4679121713698528948UL,1872479915702842775UL));
			return _ufle12jhs77_f_OriginPin;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_DestPin;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_DestPin
	{
		get
		{
			if(_ufle12jhs77_f_DestPin==null || _ufle12jhs77_f_DestPin.IsDeleted) _ufle12jhs77_f_DestPin=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(5682693562927262261UL,886020703537969570UL));
			return _ufle12jhs77_f_DestPin;
		}
	}
	private static readonly List<BGEntity> _tugjbyuhfv_reusableList = new List<BGEntity>();
	public List<E_LevelData> RelatedLevelDataListUsingWallsToDestRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_LevelData._f_WallsToDest.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_LevelData>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_LevelData) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	public List<E_LevelData> RelatedLevelDataListUsingWallsFromOriginRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_LevelData._f_WallsFromOrigin.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_LevelData>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_LevelData) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Pin.Factory _factory2_PFS = new E_Pin.Factory();
	private static readonly E_LevelGameplayData.Factory _factory3_PFS = new E_LevelGameplayData.Factory();
	private static readonly E_MapWalls.Factory _factory4_PFS = new E_MapWalls.Factory();
	private static readonly E_BiomeGameplayData.Factory _factory5_PFS = new E_BiomeGameplayData.Factory();
	private static readonly E_MapBiomeIdentifier.Factory _factory6_PFS = new E_MapBiomeIdentifier.Factory();
	private E_MapWalls() : base(MetaDefault)
	{
	}
	private E_MapWalls(BGId id) : base(MetaDefault, id)
	{
	}
	private E_MapWalls(BGMetaEntity meta) : base(meta)
	{
	}
	private E_MapWalls(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_MapWalls FindEntity(Predicate<E_MapWalls> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_MapWalls) entity)) as E_MapWalls;
	}
	public static List<E_MapWalls> FindEntities(Predicate<E_MapWalls> filter, List<E_MapWalls> result=null, Comparison<E_MapWalls> sort=null)
	{
		result = result ?? new List<E_MapWalls>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_MapWalls) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_MapWalls) e1, (E_MapWalls) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_MapWalls) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_MapWalls> action, Predicate<E_MapWalls> filter=null, Comparison<E_MapWalls> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_MapWalls) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_MapWalls) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_MapWalls)e1,(E_MapWalls)e2));
	}
	public static E_MapWalls GetEntity(BGId entityId)
	{
		return (E_MapWalls) MetaDefault.GetEntity(entityId);
	}
	public static E_MapWalls GetEntity(int index)
	{
		return (E_MapWalls) MetaDefault[index];
	}
	public static E_MapWalls GetEntity(string entityName)
	{
		return (E_MapWalls) MetaDefault.GetEntity(entityName);
	}
	public static E_MapWalls NewEntity()
	{
		return (E_MapWalls) MetaDefault.NewEntity();
	}
}

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_BiomeGameplayData : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_BiomeGameplayData(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_BiomeGameplayData(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5034592254073446088UL,14588748882179863990UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public E_Biome f_Biome
	{
		get
		{
			return (E_Biome) _f_Biome[Index];
		}
		set
		{
			_f_Biome[Index] = value;
		}
	}
	public System.Boolean f_Unlocked
	{
		get
		{
			return _f_Unlocked[Index];
		}
		set
		{
			_f_Unlocked[Index] = value;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(5375708437064997645UL,9652014909083819964UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_Biome;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Biome
	{
		get
		{
			if(_ufle12jhs77_f_Biome==null || _ufle12jhs77_f_Biome.IsDeleted) _ufle12jhs77_f_Biome=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(4879000758735367296UL,1226467751643001504UL));
			return _ufle12jhs77_f_Biome;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_Unlocked;
	public static BansheeGz.BGDatabase.BGFieldBool _f_Unlocked
	{
		get
		{
			if(_ufle12jhs77_f_Unlocked==null || _ufle12jhs77_f_Unlocked.IsDeleted) _ufle12jhs77_f_Unlocked=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5632769683042661348UL,10279484367158860964UL));
			return _ufle12jhs77_f_Unlocked;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Pin.Factory _factory2_PFS = new E_Pin.Factory();
	private static readonly E_LevelGameplayData.Factory _factory3_PFS = new E_LevelGameplayData.Factory();
	private static readonly E_MapWalls.Factory _factory4_PFS = new E_MapWalls.Factory();
	private static readonly E_BiomeGameplayData.Factory _factory5_PFS = new E_BiomeGameplayData.Factory();
	private static readonly E_MapBiomeIdentifier.Factory _factory6_PFS = new E_MapBiomeIdentifier.Factory();
	private E_BiomeGameplayData() : base(MetaDefault)
	{
	}
	private E_BiomeGameplayData(BGId id) : base(MetaDefault, id)
	{
	}
	private E_BiomeGameplayData(BGMetaEntity meta) : base(meta)
	{
	}
	private E_BiomeGameplayData(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_BiomeGameplayData FindEntity(Predicate<E_BiomeGameplayData> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_BiomeGameplayData) entity)) as E_BiomeGameplayData;
	}
	public static List<E_BiomeGameplayData> FindEntities(Predicate<E_BiomeGameplayData> filter, List<E_BiomeGameplayData> result=null, Comparison<E_BiomeGameplayData> sort=null)
	{
		result = result ?? new List<E_BiomeGameplayData>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_BiomeGameplayData) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_BiomeGameplayData) e1, (E_BiomeGameplayData) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_BiomeGameplayData) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_BiomeGameplayData> action, Predicate<E_BiomeGameplayData> filter=null, Comparison<E_BiomeGameplayData> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_BiomeGameplayData) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_BiomeGameplayData) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_BiomeGameplayData)e1,(E_BiomeGameplayData)e2));
	}
	public static E_BiomeGameplayData GetEntity(BGId entityId)
	{
		return (E_BiomeGameplayData) MetaDefault.GetEntity(entityId);
	}
	public static E_BiomeGameplayData GetEntity(int index)
	{
		return (E_BiomeGameplayData) MetaDefault[index];
	}
	public static E_BiomeGameplayData GetEntity(string entityName)
	{
		return (E_BiomeGameplayData) MetaDefault.GetEntity(entityName);
	}
	public static E_BiomeGameplayData NewEntity()
	{
		return (E_BiomeGameplayData) MetaDefault.NewEntity();
	}
}

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_MapBiomeIdentifier : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_MapBiomeIdentifier(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_MapBiomeIdentifier(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5247857210012234322UL,17267769619000920731UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public E_Biome f_Biome
	{
		get
		{
			return (E_Biome) _f_Biome[Index];
		}
		set
		{
			_f_Biome[Index] = value;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(5240021398996626780UL,3225667101278422688UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_Biome;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Biome
	{
		get
		{
			if(_ufle12jhs77_f_Biome==null || _ufle12jhs77_f_Biome.IsDeleted) _ufle12jhs77_f_Biome=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(5674227258199142705UL,10260737940855049626UL));
			return _ufle12jhs77_f_Biome;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Pin.Factory _factory2_PFS = new E_Pin.Factory();
	private static readonly E_LevelGameplayData.Factory _factory3_PFS = new E_LevelGameplayData.Factory();
	private static readonly E_MapWalls.Factory _factory4_PFS = new E_MapWalls.Factory();
	private static readonly E_BiomeGameplayData.Factory _factory5_PFS = new E_BiomeGameplayData.Factory();
	private static readonly E_MapBiomeIdentifier.Factory _factory6_PFS = new E_MapBiomeIdentifier.Factory();
	private E_MapBiomeIdentifier() : base(MetaDefault)
	{
	}
	private E_MapBiomeIdentifier(BGId id) : base(MetaDefault, id)
	{
	}
	private E_MapBiomeIdentifier(BGMetaEntity meta) : base(meta)
	{
	}
	private E_MapBiomeIdentifier(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_MapBiomeIdentifier FindEntity(Predicate<E_MapBiomeIdentifier> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_MapBiomeIdentifier) entity)) as E_MapBiomeIdentifier;
	}
	public static List<E_MapBiomeIdentifier> FindEntities(Predicate<E_MapBiomeIdentifier> filter, List<E_MapBiomeIdentifier> result=null, Comparison<E_MapBiomeIdentifier> sort=null)
	{
		result = result ?? new List<E_MapBiomeIdentifier>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_MapBiomeIdentifier) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_MapBiomeIdentifier) e1, (E_MapBiomeIdentifier) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_MapBiomeIdentifier) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_MapBiomeIdentifier> action, Predicate<E_MapBiomeIdentifier> filter=null, Comparison<E_MapBiomeIdentifier> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_MapBiomeIdentifier) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_MapBiomeIdentifier) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_MapBiomeIdentifier)e1,(E_MapBiomeIdentifier)e2));
	}
	public static E_MapBiomeIdentifier GetEntity(BGId entityId)
	{
		return (E_MapBiomeIdentifier) MetaDefault.GetEntity(entityId);
	}
	public static E_MapBiomeIdentifier GetEntity(int index)
	{
		return (E_MapBiomeIdentifier) MetaDefault[index];
	}
	public static E_MapBiomeIdentifier GetEntity(string entityName)
	{
		return (E_MapBiomeIdentifier) MetaDefault.GetEntity(entityName);
	}
	public static E_MapBiomeIdentifier NewEntity()
	{
		return (E_MapBiomeIdentifier) MetaDefault.NewEntity();
	}
}
#pragma warning restore 414
