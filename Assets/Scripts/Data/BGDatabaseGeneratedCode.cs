using System;
using System.Collections.Generic;
using BansheeGz.BGDatabase;
using Alias_rifegrt_Pin = E_Pin;
using Alias_rifegrt_LevelData = E_LevelData;

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

#pragma warning disable 414

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_LevelData : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_LevelData(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_LevelData(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4612244309294333557UL,1881374458602735547UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public E_Pin f_Pin
	{
		get
		{
			return (E_Pin) _f_Pin[Index];
		}
		set
		{
			_f_Pin[Index] = value;
		}
	}
	public System.String f_Level
	{
		get
		{
			return _f_Level[Index];
		}
		set
		{
			_f_Level[Index] = value;
		}
	}
	public System.Int32 f_LocksAmount
	{
		get
		{
			return _f_LocksAmount[Index];
		}
		set
		{
			_f_LocksAmount[Index] = value;
		}
	}
	public System.Boolean f_SegmentPresent
	{
		get
		{
			return _f_SegmentPresent[Index];
		}
		set
		{
			_f_SegmentPresent[Index] = value;
		}
	}
	public List<E_Pin> f_UnlocksPins
	{
		get
		{
			var val = _f_UnlocksPins[Index];
			if(val==null || val.Count==0) return null;
			var _ufli12jhs_UnlocksPins = new List<E_Pin>();
			for (var i = 0; i < val.Count; i++) _ufli12jhs_UnlocksPins.Add((E_Pin) val[i]);
			return _ufli12jhs_UnlocksPins;
		}
		set
		{
			var val = _f_UnlocksPins[Index];
			if(val==null) val = new List<BGEntity>();
			val.Clear();
			if(value!=null) for (var i = 0; i < value.Count; i++) val.Add(value[i]);
			_f_UnlocksPins[Index] = val;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(4740419652275606489UL,16281884087163071164UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_Pin;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Pin
	{
		get
		{
			if(_ufle12jhs77_f_Pin==null || _ufle12jhs77_f_Pin.IsDeleted) _ufle12jhs77_f_Pin=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(4755775874130559592UL,9555642772104298655UL));
			return _ufle12jhs77_f_Pin;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_Level;
	public static BansheeGz.BGDatabase.BGFieldString _f_Level
	{
		get
		{
			if(_ufle12jhs77_f_Level==null || _ufle12jhs77_f_Level.IsDeleted) _ufle12jhs77_f_Level=(BansheeGz.BGDatabase.BGFieldString) MetaDefault.GetField(new BGId(4793347658190675977UL,5994557562632312988UL));
			return _ufle12jhs77_f_Level;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_LocksAmount;
	public static BansheeGz.BGDatabase.BGFieldInt _f_LocksAmount
	{
		get
		{
			if(_ufle12jhs77_f_LocksAmount==null || _ufle12jhs77_f_LocksAmount.IsDeleted) _ufle12jhs77_f_LocksAmount=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5389772333846653446UL,11461131677490296486UL));
			return _ufle12jhs77_f_LocksAmount;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SegmentPresent;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SegmentPresent
	{
		get
		{
			if(_ufle12jhs77_f_SegmentPresent==null || _ufle12jhs77_f_SegmentPresent.IsDeleted) _ufle12jhs77_f_SegmentPresent=(BansheeGz.BGDatabase.BGFieldBool) MetaDefault.GetField(new BGId(5708768082108931619UL,17251627778783522965UL));
			return _ufle12jhs77_f_SegmentPresent;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_UnlocksPins;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_UnlocksPins
	{
		get
		{
			if(_ufle12jhs77_f_UnlocksPins==null || _ufle12jhs77_f_UnlocksPins.IsDeleted) _ufle12jhs77_f_UnlocksPins=(BansheeGz.BGDatabase.BGFieldRelationMultiple) MetaDefault.GetField(new BGId(5421760005998256390UL,4758386679893286829UL));
			return _ufle12jhs77_f_UnlocksPins;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Variety.Factory _factory2_PFS = new E_Variety.Factory();
	private static readonly E_Pin.Factory _factory3_PFS = new E_Pin.Factory();
	private E_LevelData() : base(MetaDefault)
	{
	}
	private E_LevelData(BGId id) : base(MetaDefault, id)
	{
	}
	private E_LevelData(BGMetaEntity meta) : base(meta)
	{
	}
	private E_LevelData(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_LevelData FindEntity(Predicate<E_LevelData> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_LevelData) entity)) as E_LevelData;
	}
	public static List<E_LevelData> FindEntities(Predicate<E_LevelData> filter, List<E_LevelData> result=null, Comparison<E_LevelData> sort=null)
	{
		result = result ?? new List<E_LevelData>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_LevelData) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_LevelData) e1, (E_LevelData) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_LevelData) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_LevelData> action, Predicate<E_LevelData> filter=null, Comparison<E_LevelData> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_LevelData) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_LevelData) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_LevelData)e1,(E_LevelData)e2));
	}
	public static E_LevelData GetEntity(BGId entityId)
	{
		return (E_LevelData) MetaDefault.GetEntity(entityId);
	}
	public static E_LevelData GetEntity(int index)
	{
		return (E_LevelData) MetaDefault[index];
	}
	public static E_LevelData GetEntity(string entityName)
	{
		return (E_LevelData) MetaDefault.GetEntity(entityName);
	}
	public static E_LevelData NewEntity()
	{
		return (E_LevelData) MetaDefault.NewEntity();
	}
	public void f_UnlocksPins_Add(E_Pin related)
	{
		if(related == null) throw new Exception("Can not add a related entity, cause value is null");
		var val = _f_UnlocksPins[Index];
		if(val == null) val = new List<BGEntity>{related};
		else val.Add(related);
		_f_UnlocksPins[Index] = val;
	}
	public void f_UnlocksPins_Remove(E_Pin related)
	{
		if(related == null) throw new Exception("Can not remove a related entity, cause value is null");
		var val = _f_UnlocksPins[Index];
		if(val != null)
		{
			val.RemoveAll(e => Equals(e, related));
			_f_UnlocksPins[Index] = val.Count == 0 ? null : val;
		}
	}
}

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_Biome : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_Biome(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_Biome(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5318121685371950766UL,2942031341061376408UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public List<E_Variety> f_Variety
	{
		get
		{
			var val = _f_Variety[Index];
			if(val==null || val.Count==0) return null;
			var _ufle12jhs_Variety = new List<E_Variety>();
			for (var i = 0; i < val.Count; i++) _ufle12jhs_Variety.Add((E_Variety) val[i]);
			return _ufle12jhs_Variety;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(4811910356762317652UL,6316590992709792654UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_Variety;
	public static BansheeGz.BGDatabase.BGFieldNested _f_Variety
	{
		get
		{
			if(_ufle12jhs77_f_Variety==null || _ufle12jhs77_f_Variety.IsDeleted) _ufle12jhs77_f_Variety=(BansheeGz.BGDatabase.BGFieldNested) MetaDefault.GetField(new BGId(5722706716172130075UL,12926031450509768577UL));
			return _ufle12jhs77_f_Variety;
		}
	}
	private static readonly List<BGEntity> _tugjbyuhfv_reusableList = new List<BGEntity>();
	public List<E_Pin> RelatedPinListUsingBiomeRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_Pin._f_Biome.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_Pin>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_Pin) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Variety.Factory _factory2_PFS = new E_Variety.Factory();
	private static readonly E_Pin.Factory _factory3_PFS = new E_Pin.Factory();
	private E_Biome() : base(MetaDefault)
	{
	}
	private E_Biome(BGId id) : base(MetaDefault, id)
	{
	}
	private E_Biome(BGMetaEntity meta) : base(meta)
	{
	}
	private E_Biome(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_Biome FindEntity(Predicate<E_Biome> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_Biome) entity)) as E_Biome;
	}
	public static List<E_Biome> FindEntities(Predicate<E_Biome> filter, List<E_Biome> result=null, Comparison<E_Biome> sort=null)
	{
		result = result ?? new List<E_Biome>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_Biome) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_Biome) e1, (E_Biome) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_Biome) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_Biome> action, Predicate<E_Biome> filter=null, Comparison<E_Biome> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_Biome) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_Biome) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_Biome)e1,(E_Biome)e2));
	}
	public static E_Biome GetEntity(BGId entityId)
	{
		return (E_Biome) MetaDefault.GetEntity(entityId);
	}
	public static E_Biome GetEntity(int index)
	{
		return (E_Biome) MetaDefault[index];
	}
	public static E_Biome GetEntity(string entityName)
	{
		return (E_Biome) MetaDefault.GetEntity(entityName);
	}
	public static E_Biome NewEntity()
	{
		return (E_Biome) MetaDefault.NewEntity();
	}
}

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_Variety : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_Variety(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_Variety(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5737747710488173588UL,4786942112672858515UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public E_Biome f_Biome
	{
		get
		{
			return (E_Biome) _f_Biome[Index];
		}
		set
		{
			_f_Biome[Index] = value;
		}
	}
	public UnityEngine.Object f_Object
	{
		get
		{
			return _f_Object[Index];
		}
	}
	public System.Collections.Generic.List<UnityEngine.Color> f_Color
	{
		get
		{
			return _f_Color[Index];
		}
		set
		{
			_f_Color[Index] = value;
		}
	}
	public System.Collections.Generic.List<UnityEngine.Color> f_ColorBG
	{
		get
		{
			return _f_ColorBG[Index];
		}
		set
		{
			_f_ColorBG[Index] = value;
		}
	}
	public System.Collections.Generic.List<UnityEngine.Color> f_ColorBG2
	{
		get
		{
			return _f_ColorBG2[Index];
		}
		set
		{
			_f_ColorBG2[Index] = value;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(5613765636979208794UL,4247337308855429289UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_Biome;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Biome
	{
		get
		{
			if(_ufle12jhs77_f_Biome==null || _ufle12jhs77_f_Biome.IsDeleted) _ufle12jhs77_f_Biome=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(4661050294717155902UL,2460429868659110058UL));
			return _ufle12jhs77_f_Biome;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldUnityObject _ufle12jhs77_f_Object;
	public static BansheeGz.BGDatabase.BGFieldUnityObject _f_Object
	{
		get
		{
			if(_ufle12jhs77_f_Object==null || _ufle12jhs77_f_Object.IsDeleted) _ufle12jhs77_f_Object=(BansheeGz.BGDatabase.BGFieldUnityObject) MetaDefault.GetField(new BGId(4969397191281070135UL,512279267751597211UL));
			return _ufle12jhs77_f_Object;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldListColor _ufle12jhs77_f_Color;
	public static BansheeGz.BGDatabase.BGFieldListColor _f_Color
	{
		get
		{
			if(_ufle12jhs77_f_Color==null || _ufle12jhs77_f_Color.IsDeleted) _ufle12jhs77_f_Color=(BansheeGz.BGDatabase.BGFieldListColor) MetaDefault.GetField(new BGId(5649979122024210993UL,10828038162112475050UL));
			return _ufle12jhs77_f_Color;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldListColor _ufle12jhs77_f_ColorBG;
	public static BansheeGz.BGDatabase.BGFieldListColor _f_ColorBG
	{
		get
		{
			if(_ufle12jhs77_f_ColorBG==null || _ufle12jhs77_f_ColorBG.IsDeleted) _ufle12jhs77_f_ColorBG=(BansheeGz.BGDatabase.BGFieldListColor) MetaDefault.GetField(new BGId(5651051185295949394UL,13109017916707061413UL));
			return _ufle12jhs77_f_ColorBG;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldListColor _ufle12jhs77_f_ColorBG2;
	public static BansheeGz.BGDatabase.BGFieldListColor _f_ColorBG2
	{
		get
		{
			if(_ufle12jhs77_f_ColorBG2==null || _ufle12jhs77_f_ColorBG2.IsDeleted) _ufle12jhs77_f_ColorBG2=(BansheeGz.BGDatabase.BGFieldListColor) MetaDefault.GetField(new BGId(5009535309938981592UL,2136018990551611826UL));
			return _ufle12jhs77_f_ColorBG2;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Variety.Factory _factory2_PFS = new E_Variety.Factory();
	private static readonly E_Pin.Factory _factory3_PFS = new E_Pin.Factory();
	private E_Variety() : base(MetaDefault)
	{
	}
	private E_Variety(BGId id) : base(MetaDefault, id)
	{
	}
	private E_Variety(BGMetaEntity meta) : base(meta)
	{
	}
	private E_Variety(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_Variety FindEntity(Predicate<E_Variety> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_Variety) entity)) as E_Variety;
	}
	public static List<E_Variety> FindEntities(Predicate<E_Variety> filter, List<E_Variety> result=null, Comparison<E_Variety> sort=null)
	{
		result = result ?? new List<E_Variety>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_Variety) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_Variety) e1, (E_Variety) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_Variety) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_Variety> action, Predicate<E_Variety> filter=null, Comparison<E_Variety> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_Variety) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_Variety) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_Variety)e1,(E_Variety)e2));
	}
	public static E_Variety GetEntity(BGId entityId)
	{
		return (E_Variety) MetaDefault.GetEntity(entityId);
	}
	public static E_Variety GetEntity(int index)
	{
		return (E_Variety) MetaDefault[index];
	}
	public static E_Variety GetEntity(string entityName)
	{
		return (E_Variety) MetaDefault.GetEntity(entityName);
	}
	public static E_Variety NewEntity()
	{
		return (E_Variety) MetaDefault.NewEntity();
	}
	public static E_Variety NewEntity(E_Biome owner)
	{
		return (E_Variety) MetaDefault.NewEntity(owner);
	}
}

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

public partial class E_Pin : BGEntity
{

	//=============================================================
	//||                   Generated by BansheeGz Code Generator ||
	//=============================================================

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta)
		{
			return new E_Pin(meta);
		}
		public BGEntity NewEntity(BGMetaEntity meta, BGId id)
		{
			return new E_Pin(meta, id);
		}
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault
	{
		get
		{
			if(_metaDefault==null || _metaDefault.IsDeleted) _metaDefault=BGRepo.I.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4954953875072214365UL,15478807282525472406UL));
			return _metaDefault;
		}
	}
	public static BansheeGz.BGDatabase.BGRepoEvents Events
	{
		get
		{
			return BGRepo.I.Events;
		}
	}
	private static readonly List<BGEntity> _find_Entities_Result = new List<BGEntity>();
	public static int CountEntities
	{
		get
		{
			return MetaDefault.CountEntities;
		}
	}
	public System.String f_name
	{
		get
		{
			return _f_name[Index];
		}
		set
		{
			_f_name[Index] = value;
		}
	}
	public E_Biome f_Biome
	{
		get
		{
			return (E_Biome) _f_Biome[Index];
		}
		set
		{
			_f_Biome[Index] = value;
		}
	}
	public System.Int32 f_Index
	{
		get
		{
			return _f_Index[Index];
		}
		set
		{
			_f_Index[Index] = value;
		}
	}
	public System.Int32 f_PinTextUI
	{
		get
		{
			return _f_PinTextUI[Index];
		}
		set
		{
			_f_PinTextUI[Index] = value;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name
	{
		get
		{
			if(_ufle12jhs77_f_name==null || _ufle12jhs77_f_name.IsDeleted) _ufle12jhs77_f_name=(BansheeGz.BGDatabase.BGFieldEntityName) MetaDefault.GetField(new BGId(5700619351467592780UL,9596716367873031603UL));
			return _ufle12jhs77_f_name;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_Biome;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_Biome
	{
		get
		{
			if(_ufle12jhs77_f_Biome==null || _ufle12jhs77_f_Biome.IsDeleted) _ufle12jhs77_f_Biome=(BansheeGz.BGDatabase.BGFieldRelationSingle) MetaDefault.GetField(new BGId(5355639157912867324UL,1763305154346170539UL));
			return _ufle12jhs77_f_Biome;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_Index;
	public static BansheeGz.BGDatabase.BGFieldInt _f_Index
	{
		get
		{
			if(_ufle12jhs77_f_Index==null || _ufle12jhs77_f_Index.IsDeleted) _ufle12jhs77_f_Index=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5713392823763091186UL,10906278620831617424UL));
			return _ufle12jhs77_f_Index;
		}
	}
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_PinTextUI;
	public static BansheeGz.BGDatabase.BGFieldInt _f_PinTextUI
	{
		get
		{
			if(_ufle12jhs77_f_PinTextUI==null || _ufle12jhs77_f_PinTextUI.IsDeleted) _ufle12jhs77_f_PinTextUI=(BansheeGz.BGDatabase.BGFieldInt) MetaDefault.GetField(new BGId(5208647534428573803UL,268406907975443346UL));
			return _ufle12jhs77_f_PinTextUI;
		}
	}
	private static readonly List<BGEntity> _tugjbyuhfv_reusableList = new List<BGEntity>();
	public List<E_LevelData> RelatedLevelDataListUsingPinRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_LevelData._f_Pin.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_LevelData>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_LevelData) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	public List<E_LevelData> RelatedLevelDataListUsingUnlocksPinsRelation
	{
		get
		{
			var _private_related_list = Alias_rifegrt_LevelData._f_UnlocksPins.GetRelatedIn(Id, _tugjbyuhfv_reusableList);
			if (_private_related_list.Count == 0) return null;
			var _private_result_list = new List<E_LevelData>(_private_related_list.Count);
			for (var i = 0; i < _private_related_list.Count; i++) _private_result_list.Add((E_LevelData) _private_related_list[i]);
			_tugjbyuhfv_reusableList.Clear();
			return _private_result_list;
		}
	}
	private static readonly E_LevelData.Factory _factory0_PFS = new E_LevelData.Factory();
	private static readonly E_Biome.Factory _factory1_PFS = new E_Biome.Factory();
	private static readonly E_Variety.Factory _factory2_PFS = new E_Variety.Factory();
	private static readonly E_Pin.Factory _factory3_PFS = new E_Pin.Factory();
	private E_Pin() : base(MetaDefault)
	{
	}
	private E_Pin(BGId id) : base(MetaDefault, id)
	{
	}
	private E_Pin(BGMetaEntity meta) : base(meta)
	{
	}
	private E_Pin(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static E_Pin FindEntity(Predicate<E_Pin> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((E_Pin) entity)) as E_Pin;
	}
	public static List<E_Pin> FindEntities(Predicate<E_Pin> filter, List<E_Pin> result=null, Comparison<E_Pin> sort=null)
	{
		result = result ?? new List<E_Pin>();
		_find_Entities_Result.Clear();
		MetaDefault.FindEntities(filter == null ? (Predicate<BGEntity>) null: e => filter((E_Pin) e), _find_Entities_Result, sort == null ? (Comparison<BGEntity>) null : (e1, e2) => sort((E_Pin) e1, (E_Pin) e2));
		if (_find_Entities_Result.Count != 0)
		{
			for (var i = 0; i < _find_Entities_Result.Count; i++) result.Add((E_Pin) _find_Entities_Result[i]);
			_find_Entities_Result.Clear();
		}
		return result;
	}
	public static void ForEachEntity(Action<E_Pin> action, Predicate<E_Pin> filter=null, Comparison<E_Pin> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((E_Pin) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((E_Pin) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((E_Pin)e1,(E_Pin)e2));
	}
	public static E_Pin GetEntity(BGId entityId)
	{
		return (E_Pin) MetaDefault.GetEntity(entityId);
	}
	public static E_Pin GetEntity(int index)
	{
		return (E_Pin) MetaDefault[index];
	}
	public static E_Pin GetEntity(string entityName)
	{
		return (E_Pin) MetaDefault.GetEntity(entityName);
	}
	public static E_Pin NewEntity()
	{
		return (E_Pin) MetaDefault.NewEntity();
	}
}
#pragma warning restore 414
